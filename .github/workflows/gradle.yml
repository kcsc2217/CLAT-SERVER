name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]  # develop 브랜치에 푸시될 때 배포
  pull_request:
    branches: [ "develop" ]  # develop 브랜치에 대한 PR에 대해서도 실행

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true  # 서브모듈 초기화는 이곳에 위치해야 합니다.
        token: ${{ secrets.GIT_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582  # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

  deploy:
    if: github.ref == 'refs/heads/develop'  # develop 브랜치에 푸시될 때 배포
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true  # 서브모듈 초기화는 이곳에 위치해야 합니다.
        token: ${{ secrets.GIT_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Start SSH agent and add key
      run: |
        # SSH 에이전트를 시작하고 환경 변수에 추가
        eval $(ssh-agent -s)
        # GitHub Secrets에서 가져온 SSH 키를 ~/.ssh/id_rsa로 저장
        echo "$KEY" | tr -d '\r' > ~/.ssh/id_rsa
        # SSH 키 파일에 권한 설정
        chmod 600 ~/.ssh/id_rsa
        # SSH 에이전트에 키 추가
        ssh-add ~/.ssh/id_rsa
      env:
        KEY: ${{ secrets.EC2_SSH_KEY }}  # GitHub Secrets에서 SSH 키 가져오기

    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ubuntu
      run: |
        # SSH 키를 사용하여 EC2에 배포
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $USERNAME@$HOST << 'EOF'
          # EC2에서 실행할 명령어
          cd /path/to/your/app
          git pull origin develop  # develop 브랜치로 pull
          ./gradlew bootRun
        EOF





  
